/**
 * generated by Xtext 2.37.0
 */
package it.unibo.sensor.dsl.sensorDSL.impl;

import it.unibo.sensor.dsl.sensorDSL.GeneralSensorInfo;
import it.unibo.sensor.dsl.sensorDSL.Query;
import it.unibo.sensor.dsl.sensorDSL.SensorDSLPackage;
import it.unibo.sensor.dsl.sensorDSL.TYPES;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>General Sensor Info</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.GeneralSensorInfoImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.GeneralSensorInfoImpl#getType <em>Type</em>}</li>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.GeneralSensorInfoImpl#getQuery <em>Query</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GeneralSensorInfoImpl extends MinimalEObjectImpl.Container implements GeneralSensorInfo
{
  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final TYPES TYPE_EDEFAULT = TYPES.HYDRO;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected TYPES type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getQuery() <em>Query</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuery()
   * @generated
   * @ordered
   */
  protected EList<Query> query;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GeneralSensorInfoImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SensorDSLPackage.Literals.GENERAL_SENSOR_INFO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.GENERAL_SENSOR_INFO__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TYPES getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(TYPES newType)
  {
    TYPES oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.GENERAL_SENSOR_INFO__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Query> getQuery()
  {
    if (query == null)
    {
      query = new EObjectContainmentEList<Query>(Query.class, this, SensorDSLPackage.GENERAL_SENSOR_INFO__QUERY);
    }
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SensorDSLPackage.GENERAL_SENSOR_INFO__QUERY:
        return ((InternalEList<?>)getQuery()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SensorDSLPackage.GENERAL_SENSOR_INFO__DESCRIPTION:
        return getDescription();
      case SensorDSLPackage.GENERAL_SENSOR_INFO__TYPE:
        return getType();
      case SensorDSLPackage.GENERAL_SENSOR_INFO__QUERY:
        return getQuery();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SensorDSLPackage.GENERAL_SENSOR_INFO__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case SensorDSLPackage.GENERAL_SENSOR_INFO__TYPE:
        setType((TYPES)newValue);
        return;
      case SensorDSLPackage.GENERAL_SENSOR_INFO__QUERY:
        getQuery().clear();
        getQuery().addAll((Collection<? extends Query>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SensorDSLPackage.GENERAL_SENSOR_INFO__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case SensorDSLPackage.GENERAL_SENSOR_INFO__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case SensorDSLPackage.GENERAL_SENSOR_INFO__QUERY:
        getQuery().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SensorDSLPackage.GENERAL_SENSOR_INFO__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case SensorDSLPackage.GENERAL_SENSOR_INFO__TYPE:
        return type != TYPE_EDEFAULT;
      case SensorDSLPackage.GENERAL_SENSOR_INFO__QUERY:
        return query != null && !query.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (description: ");
    result.append(description);
    result.append(", type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //GeneralSensorInfoImpl
