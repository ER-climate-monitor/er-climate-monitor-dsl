/**
 * generated by Xtext 2.37.0
 */
package it.unibo.sensor.dsl.sensorDSL.impl;

import it.unibo.sensor.dsl.sensorDSL.Comparator;
import it.unibo.sensor.dsl.sensorDSL.GeneralCronjobInfo;
import it.unibo.sensor.dsl.sensorDSL.GeneralGatewayInfo;
import it.unibo.sensor.dsl.sensorDSL.GeneralNetworkInfo;
import it.unibo.sensor.dsl.sensorDSL.GeneralSensorInfo;
import it.unibo.sensor.dsl.sensorDSL.Query;
import it.unibo.sensor.dsl.sensorDSL.Sensor;
import it.unibo.sensor.dsl.sensorDSL.SensorDSLFactory;
import it.unibo.sensor.dsl.sensorDSL.SensorDSLPackage;
import it.unibo.sensor.dsl.sensorDSL.SensorDefinition;
import it.unibo.sensor.dsl.sensorDSL.SensorRegistryInfo;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SensorDSLPackageImpl extends EPackageImpl implements SensorDSLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sensorDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sensorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass generalNetworkInfoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass generalSensorInfoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass generalGatewayInfoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sensorRegistryInfoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass generalCronjobInfoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass queryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum dayEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum comparatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum typesEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see it.unibo.sensor.dsl.sensorDSL.SensorDSLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SensorDSLPackageImpl()
  {
    super(eNS_URI, SensorDSLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link SensorDSLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SensorDSLPackage init()
  {
    if (isInited) return (SensorDSLPackage)EPackage.Registry.INSTANCE.getEPackage(SensorDSLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSensorDSLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    SensorDSLPackageImpl theSensorDSLPackage = registeredSensorDSLPackage instanceof SensorDSLPackageImpl ? (SensorDSLPackageImpl)registeredSensorDSLPackage : new SensorDSLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theSensorDSLPackage.createPackageContents();

    // Initialize created meta-data
    theSensorDSLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSensorDSLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SensorDSLPackage.eNS_URI, theSensorDSLPackage);
    return theSensorDSLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSensorDefinition()
  {
    return sensorDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSensorDefinition_Sensor()
  {
    return (EReference)sensorDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSensor()
  {
    return sensorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSensor_Name()
  {
    return (EAttribute)sensorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSensor_Infos()
  {
    return (EReference)sensorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSensor_Network()
  {
    return (EReference)sensorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSensor_Gateway()
  {
    return (EReference)sensorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSensor_Registry()
  {
    return (EReference)sensorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSensor_Cronjob()
  {
    return (EReference)sensorEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGeneralNetworkInfo()
  {
    return generalNetworkInfoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralNetworkInfo_Port()
  {
    return (EAttribute)generalNetworkInfoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralNetworkInfo_Ip()
  {
    return (EAttribute)generalNetworkInfoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGeneralSensorInfo()
  {
    return generalSensorInfoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralSensorInfo_Description()
  {
    return (EAttribute)generalSensorInfoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralSensorInfo_Type()
  {
    return (EAttribute)generalSensorInfoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getGeneralSensorInfo_Query()
  {
    return (EReference)generalSensorInfoEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGeneralGatewayInfo()
  {
    return generalGatewayInfoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralGatewayInfo_Url()
  {
    return (EAttribute)generalGatewayInfoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralGatewayInfo_Port()
  {
    return (EAttribute)generalGatewayInfoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralGatewayInfo_Register()
  {
    return (EAttribute)generalGatewayInfoEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralGatewayInfo_Shutdown()
  {
    return (EAttribute)generalGatewayInfoEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralGatewayInfo_Detection()
  {
    return (EAttribute)generalGatewayInfoEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralGatewayInfo_Alert()
  {
    return (EAttribute)generalGatewayInfoEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSensorRegistryInfo()
  {
    return sensorRegistryInfoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSensorRegistryInfo_RegistryUrl()
  {
    return (EAttribute)sensorRegistryInfoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSensorRegistryInfo_ApiKey()
  {
    return (EAttribute)sensorRegistryInfoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGeneralCronjobInfo()
  {
    return generalCronjobInfoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_From()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_To()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_Day()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_Type()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_Hour()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_Minute()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_Value()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeneralCronjobInfo_Unit()
  {
    return (EAttribute)generalCronjobInfoEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getQuery()
  {
    return queryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getQuery_Name()
  {
    return (EAttribute)queryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getQuery_Comparator()
  {
    return (EAttribute)queryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getQuery_Value()
  {
    return (EAttribute)queryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDAY()
  {
    return dayEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getComparator()
  {
    return comparatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getTYPES()
  {
    return typesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensorDSLFactory getSensorDSLFactory()
  {
    return (SensorDSLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    sensorDefinitionEClass = createEClass(SENSOR_DEFINITION);
    createEReference(sensorDefinitionEClass, SENSOR_DEFINITION__SENSOR);

    sensorEClass = createEClass(SENSOR);
    createEAttribute(sensorEClass, SENSOR__NAME);
    createEReference(sensorEClass, SENSOR__INFOS);
    createEReference(sensorEClass, SENSOR__NETWORK);
    createEReference(sensorEClass, SENSOR__GATEWAY);
    createEReference(sensorEClass, SENSOR__REGISTRY);
    createEReference(sensorEClass, SENSOR__CRONJOB);

    generalNetworkInfoEClass = createEClass(GENERAL_NETWORK_INFO);
    createEAttribute(generalNetworkInfoEClass, GENERAL_NETWORK_INFO__PORT);
    createEAttribute(generalNetworkInfoEClass, GENERAL_NETWORK_INFO__IP);

    generalSensorInfoEClass = createEClass(GENERAL_SENSOR_INFO);
    createEAttribute(generalSensorInfoEClass, GENERAL_SENSOR_INFO__DESCRIPTION);
    createEAttribute(generalSensorInfoEClass, GENERAL_SENSOR_INFO__TYPE);
    createEReference(generalSensorInfoEClass, GENERAL_SENSOR_INFO__QUERY);

    generalGatewayInfoEClass = createEClass(GENERAL_GATEWAY_INFO);
    createEAttribute(generalGatewayInfoEClass, GENERAL_GATEWAY_INFO__URL);
    createEAttribute(generalGatewayInfoEClass, GENERAL_GATEWAY_INFO__PORT);
    createEAttribute(generalGatewayInfoEClass, GENERAL_GATEWAY_INFO__REGISTER);
    createEAttribute(generalGatewayInfoEClass, GENERAL_GATEWAY_INFO__SHUTDOWN);
    createEAttribute(generalGatewayInfoEClass, GENERAL_GATEWAY_INFO__DETECTION);
    createEAttribute(generalGatewayInfoEClass, GENERAL_GATEWAY_INFO__ALERT);

    sensorRegistryInfoEClass = createEClass(SENSOR_REGISTRY_INFO);
    createEAttribute(sensorRegistryInfoEClass, SENSOR_REGISTRY_INFO__REGISTRY_URL);
    createEAttribute(sensorRegistryInfoEClass, SENSOR_REGISTRY_INFO__API_KEY);

    generalCronjobInfoEClass = createEClass(GENERAL_CRONJOB_INFO);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__FROM);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__TO);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__DAY);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__TYPE);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__HOUR);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__MINUTE);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__VALUE);
    createEAttribute(generalCronjobInfoEClass, GENERAL_CRONJOB_INFO__UNIT);

    queryEClass = createEClass(QUERY);
    createEAttribute(queryEClass, QUERY__NAME);
    createEAttribute(queryEClass, QUERY__COMPARATOR);
    createEAttribute(queryEClass, QUERY__VALUE);

    // Create enums
    dayEEnum = createEEnum(DAY);
    comparatorEEnum = createEEnum(COMPARATOR);
    typesEEnum = createEEnum(TYPES);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(sensorDefinitionEClass, SensorDefinition.class, "SensorDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSensorDefinition_Sensor(), this.getSensor(), null, "sensor", null, 0, 1, SensorDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sensorEClass, Sensor.class, "Sensor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSensor_Name(), ecorePackage.getEString(), "name", null, 0, 1, Sensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSensor_Infos(), this.getGeneralSensorInfo(), null, "infos", null, 0, 1, Sensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSensor_Network(), this.getGeneralNetworkInfo(), null, "network", null, 0, 1, Sensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSensor_Gateway(), this.getGeneralGatewayInfo(), null, "gateway", null, 0, 1, Sensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSensor_Registry(), this.getSensorRegistryInfo(), null, "registry", null, 0, 1, Sensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSensor_Cronjob(), this.getGeneralCronjobInfo(), null, "cronjob", null, 0, 1, Sensor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(generalNetworkInfoEClass, GeneralNetworkInfo.class, "GeneralNetworkInfo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGeneralNetworkInfo_Port(), ecorePackage.getEInt(), "port", null, 0, 1, GeneralNetworkInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralNetworkInfo_Ip(), ecorePackage.getEString(), "ip", null, 0, 1, GeneralNetworkInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(generalSensorInfoEClass, GeneralSensorInfo.class, "GeneralSensorInfo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGeneralSensorInfo_Description(), ecorePackage.getEString(), "description", null, 0, 1, GeneralSensorInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralSensorInfo_Type(), this.getTYPES(), "type", null, 0, 1, GeneralSensorInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getGeneralSensorInfo_Query(), this.getQuery(), null, "query", null, 0, -1, GeneralSensorInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(generalGatewayInfoEClass, GeneralGatewayInfo.class, "GeneralGatewayInfo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGeneralGatewayInfo_Url(), ecorePackage.getEString(), "url", null, 0, 1, GeneralGatewayInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralGatewayInfo_Port(), ecorePackage.getEInt(), "port", null, 0, 1, GeneralGatewayInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralGatewayInfo_Register(), ecorePackage.getEString(), "register", null, 0, 1, GeneralGatewayInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralGatewayInfo_Shutdown(), ecorePackage.getEString(), "shutdown", null, 0, 1, GeneralGatewayInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralGatewayInfo_Detection(), ecorePackage.getEString(), "detection", null, 0, 1, GeneralGatewayInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralGatewayInfo_Alert(), ecorePackage.getEString(), "alert", null, 0, 1, GeneralGatewayInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sensorRegistryInfoEClass, SensorRegistryInfo.class, "SensorRegistryInfo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSensorRegistryInfo_RegistryUrl(), ecorePackage.getEString(), "registryUrl", null, 0, 1, SensorRegistryInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSensorRegistryInfo_ApiKey(), ecorePackage.getEString(), "apiKey", null, 0, 1, SensorRegistryInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(generalCronjobInfoEClass, GeneralCronjobInfo.class, "GeneralCronjobInfo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGeneralCronjobInfo_From(), this.getDAY(), "from", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_To(), this.getDAY(), "to", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_Day(), this.getDAY(), "day", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_Type(), ecorePackage.getEString(), "type", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_Hour(), ecorePackage.getEInt(), "hour", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_Minute(), ecorePackage.getEInt(), "minute", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_Value(), ecorePackage.getEInt(), "value", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeneralCronjobInfo_Unit(), ecorePackage.getEString(), "unit", null, 0, 1, GeneralCronjobInfo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(queryEClass, Query.class, "Query", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getQuery_Name(), ecorePackage.getEString(), "name", null, 0, 1, Query.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getQuery_Comparator(), this.getComparator(), "comparator", null, 0, 1, Query.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getQuery_Value(), ecorePackage.getEString(), "value", null, 0, 1, Query.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.class, "DAY");
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.MONDAY);
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.TUESDAY);
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.WEDNESDAY);
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.THURSDAY);
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.FRIDAY);
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.SATURDAY);
    addEEnumLiteral(dayEEnum, it.unibo.sensor.dsl.sensorDSL.DAY.SUNDAY);

    initEEnum(comparatorEEnum, Comparator.class, "Comparator");
    addEEnumLiteral(comparatorEEnum, Comparator.GREATER);
    addEEnumLiteral(comparatorEEnum, Comparator.SMALLER);

    initEEnum(typesEEnum, it.unibo.sensor.dsl.sensorDSL.TYPES.class, "TYPES");
    addEEnumLiteral(typesEEnum, it.unibo.sensor.dsl.sensorDSL.TYPES.HYDRO);
    addEEnumLiteral(typesEEnum, it.unibo.sensor.dsl.sensorDSL.TYPES.TEMPERATURE);
    addEEnumLiteral(typesEEnum, it.unibo.sensor.dsl.sensorDSL.TYPES.HUMIDITY);
    addEEnumLiteral(typesEEnum, it.unibo.sensor.dsl.sensorDSL.TYPES.WIND);
    addEEnumLiteral(typesEEnum, it.unibo.sensor.dsl.sensorDSL.TYPES.RAIN);

    // Create resource
    createResource(eNS_URI);
  }

} //SensorDSLPackageImpl
