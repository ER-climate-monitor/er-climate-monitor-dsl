/**
 * generated by Xtext 2.37.0
 */
package it.unibo.sensor.dsl.sensorDSL.impl;

import it.unibo.sensor.dsl.sensorDSL.GeneralCronjobInfo;
import it.unibo.sensor.dsl.sensorDSL.GeneralGatewayInfo;
import it.unibo.sensor.dsl.sensorDSL.GeneralNetworkInfo;
import it.unibo.sensor.dsl.sensorDSL.GeneralSensorInfo;
import it.unibo.sensor.dsl.sensorDSL.Sensor;
import it.unibo.sensor.dsl.sensorDSL.SensorDSLPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.SensorImpl#getName <em>Name</em>}</li>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.SensorImpl#getInfos <em>Infos</em>}</li>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.SensorImpl#getNetwork <em>Network</em>}</li>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.SensorImpl#getGateway <em>Gateway</em>}</li>
 *   <li>{@link it.unibo.sensor.dsl.sensorDSL.impl.SensorImpl#getCronjob <em>Cronjob</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorImpl extends MinimalEObjectImpl.Container implements Sensor
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInfos() <em>Infos</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInfos()
   * @generated
   * @ordered
   */
  protected GeneralSensorInfo infos;

  /**
   * The cached value of the '{@link #getNetwork() <em>Network</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNetwork()
   * @generated
   * @ordered
   */
  protected GeneralNetworkInfo network;

  /**
   * The cached value of the '{@link #getGateway() <em>Gateway</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateway()
   * @generated
   * @ordered
   */
  protected GeneralGatewayInfo gateway;

  /**
   * The cached value of the '{@link #getCronjob() <em>Cronjob</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCronjob()
   * @generated
   * @ordered
   */
  protected GeneralCronjobInfo cronjob;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SensorDSLPackage.Literals.SENSOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralSensorInfo getInfos()
  {
    return infos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInfos(GeneralSensorInfo newInfos, NotificationChain msgs)
  {
    GeneralSensorInfo oldInfos = infos;
    infos = newInfos;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__INFOS, oldInfos, newInfos);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInfos(GeneralSensorInfo newInfos)
  {
    if (newInfos != infos)
    {
      NotificationChain msgs = null;
      if (infos != null)
        msgs = ((InternalEObject)infos).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__INFOS, null, msgs);
      if (newInfos != null)
        msgs = ((InternalEObject)newInfos).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__INFOS, null, msgs);
      msgs = basicSetInfos(newInfos, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__INFOS, newInfos, newInfos));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralNetworkInfo getNetwork()
  {
    return network;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNetwork(GeneralNetworkInfo newNetwork, NotificationChain msgs)
  {
    GeneralNetworkInfo oldNetwork = network;
    network = newNetwork;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__NETWORK, oldNetwork, newNetwork);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNetwork(GeneralNetworkInfo newNetwork)
  {
    if (newNetwork != network)
    {
      NotificationChain msgs = null;
      if (network != null)
        msgs = ((InternalEObject)network).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__NETWORK, null, msgs);
      if (newNetwork != null)
        msgs = ((InternalEObject)newNetwork).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__NETWORK, null, msgs);
      msgs = basicSetNetwork(newNetwork, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__NETWORK, newNetwork, newNetwork));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralGatewayInfo getGateway()
  {
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGateway(GeneralGatewayInfo newGateway, NotificationChain msgs)
  {
    GeneralGatewayInfo oldGateway = gateway;
    gateway = newGateway;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__GATEWAY, oldGateway, newGateway);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateway(GeneralGatewayInfo newGateway)
  {
    if (newGateway != gateway)
    {
      NotificationChain msgs = null;
      if (gateway != null)
        msgs = ((InternalEObject)gateway).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__GATEWAY, null, msgs);
      if (newGateway != null)
        msgs = ((InternalEObject)newGateway).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__GATEWAY, null, msgs);
      msgs = basicSetGateway(newGateway, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__GATEWAY, newGateway, newGateway));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralCronjobInfo getCronjob()
  {
    return cronjob;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCronjob(GeneralCronjobInfo newCronjob, NotificationChain msgs)
  {
    GeneralCronjobInfo oldCronjob = cronjob;
    cronjob = newCronjob;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__CRONJOB, oldCronjob, newCronjob);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCronjob(GeneralCronjobInfo newCronjob)
  {
    if (newCronjob != cronjob)
    {
      NotificationChain msgs = null;
      if (cronjob != null)
        msgs = ((InternalEObject)cronjob).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__CRONJOB, null, msgs);
      if (newCronjob != null)
        msgs = ((InternalEObject)newCronjob).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorDSLPackage.SENSOR__CRONJOB, null, msgs);
      msgs = basicSetCronjob(newCronjob, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorDSLPackage.SENSOR__CRONJOB, newCronjob, newCronjob));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SensorDSLPackage.SENSOR__INFOS:
        return basicSetInfos(null, msgs);
      case SensorDSLPackage.SENSOR__NETWORK:
        return basicSetNetwork(null, msgs);
      case SensorDSLPackage.SENSOR__GATEWAY:
        return basicSetGateway(null, msgs);
      case SensorDSLPackage.SENSOR__CRONJOB:
        return basicSetCronjob(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SensorDSLPackage.SENSOR__NAME:
        return getName();
      case SensorDSLPackage.SENSOR__INFOS:
        return getInfos();
      case SensorDSLPackage.SENSOR__NETWORK:
        return getNetwork();
      case SensorDSLPackage.SENSOR__GATEWAY:
        return getGateway();
      case SensorDSLPackage.SENSOR__CRONJOB:
        return getCronjob();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SensorDSLPackage.SENSOR__NAME:
        setName((String)newValue);
        return;
      case SensorDSLPackage.SENSOR__INFOS:
        setInfos((GeneralSensorInfo)newValue);
        return;
      case SensorDSLPackage.SENSOR__NETWORK:
        setNetwork((GeneralNetworkInfo)newValue);
        return;
      case SensorDSLPackage.SENSOR__GATEWAY:
        setGateway((GeneralGatewayInfo)newValue);
        return;
      case SensorDSLPackage.SENSOR__CRONJOB:
        setCronjob((GeneralCronjobInfo)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SensorDSLPackage.SENSOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SensorDSLPackage.SENSOR__INFOS:
        setInfos((GeneralSensorInfo)null);
        return;
      case SensorDSLPackage.SENSOR__NETWORK:
        setNetwork((GeneralNetworkInfo)null);
        return;
      case SensorDSLPackage.SENSOR__GATEWAY:
        setGateway((GeneralGatewayInfo)null);
        return;
      case SensorDSLPackage.SENSOR__CRONJOB:
        setCronjob((GeneralCronjobInfo)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SensorDSLPackage.SENSOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SensorDSLPackage.SENSOR__INFOS:
        return infos != null;
      case SensorDSLPackage.SENSOR__NETWORK:
        return network != null;
      case SensorDSLPackage.SENSOR__GATEWAY:
        return gateway != null;
      case SensorDSLPackage.SENSOR__CRONJOB:
        return cronjob != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //SensorImpl
