/*
 * generated by Xtext 2.37.0
 */
package it.unibo.sensor.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SensorDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SensorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.SensorDefinition");
		private final Assignment cSensorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSensorSensorParserRuleCall_0 = (RuleCall)cSensorAssignment.eContents().get(0);
		
		//SensorDefinition:
		//    sensor=Sensor;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=Sensor
		public Assignment getSensorAssignment() { return cSensorAssignment; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_0() { return cSensorSensorParserRuleCall_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cInfosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInfosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInfosGeneralSensorInfoParserRuleCall_5_0 = (RuleCall)cInfosAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cNetworkKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNetworkAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNetworkGeneralNetworkInfoParserRuleCall_9_0 = (RuleCall)cNetworkAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cGatewayKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cGatewayAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cGatewayGeneralGatewayInfoParserRuleCall_13_0 = (RuleCall)cGatewayAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cCronjobKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cLeftCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cCronjobAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cCronjobGeneralCronjobInfoParserRuleCall_17_0 = (RuleCall)cCronjobAssignment_17.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		
		//Sensor:
		//    '{'
		//        'name' name=STRING
		//        'infos' '{' infos=GeneralSensorInfo '}'
		//        'network' '{' network=GeneralNetworkInfo '}'
		//        'gateway' '{' gateway=GeneralGatewayInfo '}'
		//        'cronjob' '{' cronjob=GeneralCronjobInfo '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//    'name' name=STRING
		//    'infos' '{' infos=GeneralSensorInfo '}'
		//    'network' '{' network=GeneralNetworkInfo '}'
		//    'gateway' '{' gateway=GeneralGatewayInfo '}'
		//    'cronjob' '{' cronjob=GeneralCronjobInfo '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'infos'
		public Keyword getInfosKeyword_3() { return cInfosKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//infos=GeneralSensorInfo
		public Assignment getInfosAssignment_5() { return cInfosAssignment_5; }
		
		//GeneralSensorInfo
		public RuleCall getInfosGeneralSensorInfoParserRuleCall_5_0() { return cInfosGeneralSensorInfoParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'network'
		public Keyword getNetworkKeyword_7() { return cNetworkKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//network=GeneralNetworkInfo
		public Assignment getNetworkAssignment_9() { return cNetworkAssignment_9; }
		
		//GeneralNetworkInfo
		public RuleCall getNetworkGeneralNetworkInfoParserRuleCall_9_0() { return cNetworkGeneralNetworkInfoParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//'gateway'
		public Keyword getGatewayKeyword_11() { return cGatewayKeyword_11; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }
		
		//gateway=GeneralGatewayInfo
		public Assignment getGatewayAssignment_13() { return cGatewayAssignment_13; }
		
		//GeneralGatewayInfo
		public RuleCall getGatewayGeneralGatewayInfoParserRuleCall_13_0() { return cGatewayGeneralGatewayInfoParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//'cronjob'
		public Keyword getCronjobKeyword_15() { return cCronjobKeyword_15; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16() { return cLeftCurlyBracketKeyword_16; }
		
		//cronjob=GeneralCronjobInfo
		public Assignment getCronjobAssignment_17() { return cCronjobAssignment_17; }
		
		//GeneralCronjobInfo
		public RuleCall getCronjobGeneralCronjobInfoParserRuleCall_17_0() { return cCronjobGeneralCronjobInfoParserRuleCall_17_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }
	}
	public class GeneralNetworkInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.GeneralNetworkInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortINTTerminalRuleCall_1_0 = (RuleCall)cPortAssignment_1.eContents().get(0);
		private final Keyword cIpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIpSTRINGTerminalRuleCall_3_0 = (RuleCall)cIpAssignment_3.eContents().get(0);
		
		//GeneralNetworkInfo:
		//    'port' port=INT
		//    'ip' ip=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'port' port=INT
		//'ip' ip=STRING
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//port=INT
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_1_0() { return cPortINTTerminalRuleCall_1_0; }
		
		//'ip'
		public Keyword getIpKeyword_2() { return cIpKeyword_2; }
		
		//ip=STRING
		public Assignment getIpAssignment_3() { return cIpAssignment_3; }
		
		//STRING
		public RuleCall getIpSTRINGTerminalRuleCall_3_0() { return cIpSTRINGTerminalRuleCall_3_0; }
	}
	public class GeneralSensorInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.GeneralSensorInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTYPESEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cQueriesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQueryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQueryQueryParserRuleCall_6_0 = (RuleCall)cQueryAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GeneralSensorInfo:
		//    'description' description=STRING
		//    'type' type=TYPES
		//    'queries' '[' (query+=Query)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'description' description=STRING
		//'type' type=TYPES
		//'queries' '[' (query+=Query)* ']'
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=TYPES
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TYPES
		public RuleCall getTypeTYPESEnumRuleCall_3_0() { return cTypeTYPESEnumRuleCall_3_0; }
		
		//'queries'
		public Keyword getQueriesKeyword_4() { return cQueriesKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//(query+=Query)*
		public Assignment getQueryAssignment_6() { return cQueryAssignment_6; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_6_0() { return cQueryQueryParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class GeneralGatewayInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.GeneralGatewayInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Keyword cRegisterRouteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRegisterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegisterSTRINGTerminalRuleCall_3_0 = (RuleCall)cRegisterAssignment_3.eContents().get(0);
		private final Keyword cShutdownRouteKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cShutdownAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cShutdownSTRINGTerminalRuleCall_5_0 = (RuleCall)cShutdownAssignment_5.eContents().get(0);
		private final Keyword cDetectionRouteKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDetectionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDetectionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDetectionAssignment_7.eContents().get(0);
		private final Keyword cAlertRouteKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAlertAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAlertSTRINGTerminalRuleCall_9_0 = (RuleCall)cAlertAssignment_9.eContents().get(0);
		
		//GeneralGatewayInfo:
		//    'url' url=STRING
		//    'registerRoute' register=STRING
		//    'shutdownRoute' shutdown=STRING
		//    'detectionRoute' detection=STRING
		//    'alertRoute' alert=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'url' url=STRING
		//'registerRoute' register=STRING
		//'shutdownRoute' shutdown=STRING
		//'detectionRoute' detection=STRING
		//'alertRoute' alert=STRING
		public Group getGroup() { return cGroup; }
		
		//'url'
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
		
		//'registerRoute'
		public Keyword getRegisterRouteKeyword_2() { return cRegisterRouteKeyword_2; }
		
		//register=STRING
		public Assignment getRegisterAssignment_3() { return cRegisterAssignment_3; }
		
		//STRING
		public RuleCall getRegisterSTRINGTerminalRuleCall_3_0() { return cRegisterSTRINGTerminalRuleCall_3_0; }
		
		//'shutdownRoute'
		public Keyword getShutdownRouteKeyword_4() { return cShutdownRouteKeyword_4; }
		
		//shutdown=STRING
		public Assignment getShutdownAssignment_5() { return cShutdownAssignment_5; }
		
		//STRING
		public RuleCall getShutdownSTRINGTerminalRuleCall_5_0() { return cShutdownSTRINGTerminalRuleCall_5_0; }
		
		//'detectionRoute'
		public Keyword getDetectionRouteKeyword_6() { return cDetectionRouteKeyword_6; }
		
		//detection=STRING
		public Assignment getDetectionAssignment_7() { return cDetectionAssignment_7; }
		
		//STRING
		public RuleCall getDetectionSTRINGTerminalRuleCall_7_0() { return cDetectionSTRINGTerminalRuleCall_7_0; }
		
		//'alertRoute'
		public Keyword getAlertRouteKeyword_8() { return cAlertRouteKeyword_8; }
		
		//alert=STRING
		public Assignment getAlertAssignment_9() { return cAlertAssignment_9; }
		
		//STRING
		public RuleCall getAlertSTRINGTerminalRuleCall_9_0() { return cAlertSTRINGTerminalRuleCall_9_0; }
	}
	public class GeneralCronjobInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.GeneralCronjobInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cFromKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cFromAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cFromDAYEnumRuleCall_0_0_1_0 = (RuleCall)cFromAssignment_0_0_1.eContents().get(0);
		private final Keyword cToKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cToAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cToDAYEnumRuleCall_0_0_3_0 = (RuleCall)cToAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cEveryKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cDayAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cDayDAYEnumRuleCall_0_1_1_0 = (RuleCall)cDayAssignment_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAtKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cHourAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cHourINTTerminalRuleCall_1_0_1_0 = (RuleCall)cHourAssignment_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cMinuteAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cMinuteINTTerminalRuleCall_1_0_3_0 = (RuleCall)cMinuteAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEveryKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Keyword cHoursKeyword_1_1_2_0 = (Keyword)cAlternatives_1_1_2.eContents().get(0);
		private final Keyword cMinutesKeyword_1_1_2_1 = (Keyword)cAlternatives_1_1_2.eContents().get(1);
		
		//GeneralCronjobInfo:
		//    (('from' from=DAY 'to' to=DAY) | 'every' day=DAY) (('at' hour=INT ':' minute=INT) | 'every' value=INT ('hours' | 'minutes'));
		@Override public ParserRule getRule() { return rule; }
		
		//(('from' from=DAY 'to' to=DAY) | 'every' day=DAY) (('at' hour=INT ':' minute=INT) | 'every' value=INT ('hours' | 'minutes'))
		public Group getGroup() { return cGroup; }
		
		//(('from' from=DAY 'to' to=DAY) | 'every' day=DAY)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//('from' from=DAY 'to' to=DAY)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0_0() { return cFromKeyword_0_0_0; }
		
		//from=DAY
		public Assignment getFromAssignment_0_0_1() { return cFromAssignment_0_0_1; }
		
		//DAY
		public RuleCall getFromDAYEnumRuleCall_0_0_1_0() { return cFromDAYEnumRuleCall_0_0_1_0; }
		
		//'to'
		public Keyword getToKeyword_0_0_2() { return cToKeyword_0_0_2; }
		
		//to=DAY
		public Assignment getToAssignment_0_0_3() { return cToAssignment_0_0_3; }
		
		//DAY
		public RuleCall getToDAYEnumRuleCall_0_0_3_0() { return cToDAYEnumRuleCall_0_0_3_0; }
		
		//'every' day=DAY
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'every'
		public Keyword getEveryKeyword_0_1_0() { return cEveryKeyword_0_1_0; }
		
		//day=DAY
		public Assignment getDayAssignment_0_1_1() { return cDayAssignment_0_1_1; }
		
		//DAY
		public RuleCall getDayDAYEnumRuleCall_0_1_1_0() { return cDayDAYEnumRuleCall_0_1_1_0; }
		
		//(('at' hour=INT ':' minute=INT) | 'every' value=INT ('hours' | 'minutes'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('at' hour=INT ':' minute=INT)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'at'
		public Keyword getAtKeyword_1_0_0() { return cAtKeyword_1_0_0; }
		
		//hour=INT
		public Assignment getHourAssignment_1_0_1() { return cHourAssignment_1_0_1; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_1_0_1_0() { return cHourINTTerminalRuleCall_1_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }
		
		//minute=INT
		public Assignment getMinuteAssignment_1_0_3() { return cMinuteAssignment_1_0_3; }
		
		//INT
		public RuleCall getMinuteINTTerminalRuleCall_1_0_3_0() { return cMinuteINTTerminalRuleCall_1_0_3_0; }
		
		//'every' value=INT ('hours' | 'minutes')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'every'
		public Keyword getEveryKeyword_1_1_0() { return cEveryKeyword_1_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_1_0() { return cValueINTTerminalRuleCall_1_1_1_0; }
		
		//('hours' | 'minutes')
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }
		
		//'hours'
		public Keyword getHoursKeyword_1_1_2_0() { return cHoursKeyword_1_1_2_0; }
		
		//'minutes'
		public Keyword getMinutesKeyword_1_1_2_1() { return cMinutesKeyword_1_1_2_1; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThresholdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cComparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparatorComparatorEnumRuleCall_3_0 = (RuleCall)cComparatorAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Query:
		//    '-' 'threshold' name=STRING comparator=Comparator value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' 'threshold' name=STRING comparator=Comparator value=STRING
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'threshold'
		public Keyword getThresholdKeyword_1() { return cThresholdKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//comparator=Comparator
		public Assignment getComparatorAssignment_3() { return cComparatorAssignment_3; }
		
		//Comparator
		public RuleCall getComparatorComparatorEnumRuleCall_3_0() { return cComparatorComparatorEnumRuleCall_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }
	}
	
	public class DAYElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.DAY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMondayEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMondayMondayKeyword_0_0 = (Keyword)cMondayEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTuesdayEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTuesdayTuesdayKeyword_1_0 = (Keyword)cTuesdayEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWednesdayEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWednesdayWednesdayKeyword_2_0 = (Keyword)cWednesdayEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cThursdayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cThursdayThursdayKeyword_3_0 = (Keyword)cThursdayEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFridayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFridayFridayKeyword_4_0 = (Keyword)cFridayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSaturdayEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSaturdaySaturdayKeyword_5_0 = (Keyword)cSaturdayEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSundayEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSundaySundayKeyword_6_0 = (Keyword)cSundayEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum DAY:
		//    monday='monday' | tuesday='tuesday' | wednesday = 'wednesday' | thursday = 'thursday' | friday = 'friday' | saturday = 'saturday' | sunday = 'sunday';
		public EnumRule getRule() { return rule; }
		
		//monday='monday' | tuesday='tuesday' | wednesday = 'wednesday' | thursday = 'thursday' | friday = 'friday' | saturday = 'saturday' | sunday = 'sunday'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//monday='monday'
		public EnumLiteralDeclaration getMondayEnumLiteralDeclaration_0() { return cMondayEnumLiteralDeclaration_0; }
		
		//'monday'
		public Keyword getMondayMondayKeyword_0_0() { return cMondayMondayKeyword_0_0; }
		
		//tuesday='tuesday'
		public EnumLiteralDeclaration getTuesdayEnumLiteralDeclaration_1() { return cTuesdayEnumLiteralDeclaration_1; }
		
		//'tuesday'
		public Keyword getTuesdayTuesdayKeyword_1_0() { return cTuesdayTuesdayKeyword_1_0; }
		
		//wednesday = 'wednesday'
		public EnumLiteralDeclaration getWednesdayEnumLiteralDeclaration_2() { return cWednesdayEnumLiteralDeclaration_2; }
		
		//'wednesday'
		public Keyword getWednesdayWednesdayKeyword_2_0() { return cWednesdayWednesdayKeyword_2_0; }
		
		//thursday = 'thursday'
		public EnumLiteralDeclaration getThursdayEnumLiteralDeclaration_3() { return cThursdayEnumLiteralDeclaration_3; }
		
		//'thursday'
		public Keyword getThursdayThursdayKeyword_3_0() { return cThursdayThursdayKeyword_3_0; }
		
		//friday = 'friday'
		public EnumLiteralDeclaration getFridayEnumLiteralDeclaration_4() { return cFridayEnumLiteralDeclaration_4; }
		
		//'friday'
		public Keyword getFridayFridayKeyword_4_0() { return cFridayFridayKeyword_4_0; }
		
		//saturday = 'saturday'
		public EnumLiteralDeclaration getSaturdayEnumLiteralDeclaration_5() { return cSaturdayEnumLiteralDeclaration_5; }
		
		//'saturday'
		public Keyword getSaturdaySaturdayKeyword_5_0() { return cSaturdaySaturdayKeyword_5_0; }
		
		//sunday = 'sunday'
		public EnumLiteralDeclaration getSundayEnumLiteralDeclaration_6() { return cSundayEnumLiteralDeclaration_6; }
		
		//'sunday'
		public Keyword getSundaySundayKeyword_6_0() { return cSundaySundayKeyword_6_0; }
	}
	public class ComparatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERGreaterThanSignKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSMALLERLessThanSignKeyword_1_0 = (Keyword)cSMALLEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Comparator:
		//    GREATER = '>' | SMALLER = '<';
		public EnumRule getRule() { return rule; }
		
		//GREATER = '>' | SMALLER = '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER = '>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_0_0() { return cGREATERGreaterThanSignKeyword_0_0; }
		
		//SMALLER = '<'
		public EnumLiteralDeclaration getSMALLEREnumLiteralDeclaration_1() { return cSMALLEREnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getSMALLERLessThanSignKeyword_1_0() { return cSMALLERLessThanSignKeyword_1_0; }
	}
	public class TYPESElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.sensor.dsl.SensorDSL.TYPES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHydroEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHydroIdro_levelKeyword_0_0 = (Keyword)cHydroEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTemperatureEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTemperatureTempKeyword_1_0 = (Keyword)cTemperatureEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHumidityEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHumidityHumidityKeyword_2_0 = (Keyword)cHumidityEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWindEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWindWindKeyword_3_0 = (Keyword)cWindEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRainEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRainRainKeyword_4_0 = (Keyword)cRainEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum TYPES: hydro = "idro_level" | temperature = "temp" | humidity = "humidity" | wind = "wind" | rain = "rain";
		public EnumRule getRule() { return rule; }
		
		//hydro = "idro_level" | temperature = "temp" | humidity = "humidity" | wind = "wind" | rain = "rain"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hydro = "idro_level"
		public EnumLiteralDeclaration getHydroEnumLiteralDeclaration_0() { return cHydroEnumLiteralDeclaration_0; }
		
		//"idro_level"
		public Keyword getHydroIdro_levelKeyword_0_0() { return cHydroIdro_levelKeyword_0_0; }
		
		//temperature = "temp"
		public EnumLiteralDeclaration getTemperatureEnumLiteralDeclaration_1() { return cTemperatureEnumLiteralDeclaration_1; }
		
		//"temp"
		public Keyword getTemperatureTempKeyword_1_0() { return cTemperatureTempKeyword_1_0; }
		
		//humidity = "humidity"
		public EnumLiteralDeclaration getHumidityEnumLiteralDeclaration_2() { return cHumidityEnumLiteralDeclaration_2; }
		
		//"humidity"
		public Keyword getHumidityHumidityKeyword_2_0() { return cHumidityHumidityKeyword_2_0; }
		
		//wind = "wind"
		public EnumLiteralDeclaration getWindEnumLiteralDeclaration_3() { return cWindEnumLiteralDeclaration_3; }
		
		//"wind"
		public Keyword getWindWindKeyword_3_0() { return cWindWindKeyword_3_0; }
		
		//rain = "rain"
		public EnumLiteralDeclaration getRainEnumLiteralDeclaration_4() { return cRainEnumLiteralDeclaration_4; }
		
		//"rain"
		public Keyword getRainRainKeyword_4_0() { return cRainRainKeyword_4_0; }
	}
	
	private final SensorDefinitionElements pSensorDefinition;
	private final SensorElements pSensor;
	private final GeneralNetworkInfoElements pGeneralNetworkInfo;
	private final GeneralSensorInfoElements pGeneralSensorInfo;
	private final GeneralGatewayInfoElements pGeneralGatewayInfo;
	private final GeneralCronjobInfoElements pGeneralCronjobInfo;
	private final DAYElements eDAY;
	private final QueryElements pQuery;
	private final ComparatorElements eComparator;
	private final TYPESElements eTYPES;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SensorDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSensorDefinition = new SensorDefinitionElements();
		this.pSensor = new SensorElements();
		this.pGeneralNetworkInfo = new GeneralNetworkInfoElements();
		this.pGeneralSensorInfo = new GeneralSensorInfoElements();
		this.pGeneralGatewayInfo = new GeneralGatewayInfoElements();
		this.pGeneralCronjobInfo = new GeneralCronjobInfoElements();
		this.eDAY = new DAYElements();
		this.pQuery = new QueryElements();
		this.eComparator = new ComparatorElements();
		this.eTYPES = new TYPESElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.sensor.dsl.SensorDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SensorDefinition:
	//    sensor=Sensor;
	public SensorDefinitionElements getSensorDefinitionAccess() {
		return pSensorDefinition;
	}
	
	public ParserRule getSensorDefinitionRule() {
		return getSensorDefinitionAccess().getRule();
	}
	
	//Sensor:
	//    '{'
	//        'name' name=STRING
	//        'infos' '{' infos=GeneralSensorInfo '}'
	//        'network' '{' network=GeneralNetworkInfo '}'
	//        'gateway' '{' gateway=GeneralGatewayInfo '}'
	//        'cronjob' '{' cronjob=GeneralCronjobInfo '}'
	//    '}';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//GeneralNetworkInfo:
	//    'port' port=INT
	//    'ip' ip=STRING;
	public GeneralNetworkInfoElements getGeneralNetworkInfoAccess() {
		return pGeneralNetworkInfo;
	}
	
	public ParserRule getGeneralNetworkInfoRule() {
		return getGeneralNetworkInfoAccess().getRule();
	}
	
	//GeneralSensorInfo:
	//    'description' description=STRING
	//    'type' type=TYPES
	//    'queries' '[' (query+=Query)* ']';
	public GeneralSensorInfoElements getGeneralSensorInfoAccess() {
		return pGeneralSensorInfo;
	}
	
	public ParserRule getGeneralSensorInfoRule() {
		return getGeneralSensorInfoAccess().getRule();
	}
	
	//GeneralGatewayInfo:
	//    'url' url=STRING
	//    'registerRoute' register=STRING
	//    'shutdownRoute' shutdown=STRING
	//    'detectionRoute' detection=STRING
	//    'alertRoute' alert=STRING;
	public GeneralGatewayInfoElements getGeneralGatewayInfoAccess() {
		return pGeneralGatewayInfo;
	}
	
	public ParserRule getGeneralGatewayInfoRule() {
		return getGeneralGatewayInfoAccess().getRule();
	}
	
	//GeneralCronjobInfo:
	//    (('from' from=DAY 'to' to=DAY) | 'every' day=DAY) (('at' hour=INT ':' minute=INT) | 'every' value=INT ('hours' | 'minutes'));
	public GeneralCronjobInfoElements getGeneralCronjobInfoAccess() {
		return pGeneralCronjobInfo;
	}
	
	public ParserRule getGeneralCronjobInfoRule() {
		return getGeneralCronjobInfoAccess().getRule();
	}
	
	//enum DAY:
	//    monday='monday' | tuesday='tuesday' | wednesday = 'wednesday' | thursday = 'thursday' | friday = 'friday' | saturday = 'saturday' | sunday = 'sunday';
	public DAYElements getDAYAccess() {
		return eDAY;
	}
	
	public EnumRule getDAYRule() {
		return getDAYAccess().getRule();
	}
	
	//Query:
	//    '-' 'threshold' name=STRING comparator=Comparator value=STRING;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//enum Comparator:
	//    GREATER = '>' | SMALLER = '<';
	public ComparatorElements getComparatorAccess() {
		return eComparator;
	}
	
	public EnumRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//enum TYPES: hydro = "idro_level" | temperature = "temp" | humidity = "humidity" | wind = "wind" | rain = "rain";
	public TYPESElements getTYPESAccess() {
		return eTYPES;
	}
	
	public EnumRule getTYPESRule() {
		return getTYPESAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
